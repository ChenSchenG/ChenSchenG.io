<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChenSchenG &#39;s Blog</title>
  
  <subtitle>无人系统开发 &amp; 网络安全研究</subtitle>
  <link href="https://chenscheng.github.io/atom.xml" rel="self"/>
  
  <link href="https://chenscheng.github.io/"/>
  <updated>2025-06-25T18:14:22.707Z</updated>
  <id>https://chenscheng.github.io/</id>
  
  <author>
    <name>陈思成</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大学生无人驾驶方程式 规划算法培训手册</title>
    <link href="https://chenscheng.github.io/2025/06/26/%E5%9F%BA%E4%BA%8E%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%97%A0%E4%BA%BA%E6%96%B9%E7%A8%8B%E5%BC%8F-%E8%BD%A8%E8%BF%B9%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/"/>
    <id>https://chenscheng.github.io/2025/06/26/%E5%9F%BA%E4%BA%8E%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%97%A0%E4%BA%BA%E6%96%B9%E7%A8%8B%E5%BC%8F-%E8%BD%A8%E8%BF%B9%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/</id>
    <published>2025-06-25T18:03:37.145Z</published>
    <updated>2025-06-25T18:14:22.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于大学生无人方程式-轨迹规划问题-—-陈思成"><a href="#基于大学生无人方程式-轨迹规划问题-—-陈思成" class="headerlink" title="基于大学生无人方程式 轨迹规划问题 —-陈思成"></a>基于大学生无人方程式 轨迹规划问题 —-陈思成</h2><h2 id="一、初识轨迹规划"><a href="#一、初识轨迹规划" class="headerlink" title="一、初识轨迹规划"></a>一、初识轨迹规划</h2><h3 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h3><p>​在针对大学生方程式的路径规划问题，学习各种算法时，我们需要时刻提醒自己，一切学习的目的是什么，无论是挑战高难度的算法流程还是为了实现最快的圈速成绩。<u>带着这些需要解决的实际问题入手</u>，明白知晓不同算法逻辑带来的不同效果。只有取其精华，才能让赛车开发工作越来越顺利。<u><em><strong>该问题的学习对C++&#x2F;Python 的要求较高，需要有面向对象编程及之前的全部编程能力，无界无人方程式车队的代码，经过考虑运行速率等问题，优先使用C++为无人系统的通用语言（本文提及的所有代码实现C++和Python都有示例，不用担心），具体模块内容也可视情况变化。希望接下来学习的同学能够在代码的海洋里不懈探索。加油！</strong></em></u></p><h3 id="二、了解轨迹规划"><a href="#二、了解轨迹规划" class="headerlink" title="二、了解轨迹规划"></a>二、了解轨迹规划</h3><p>​自动驾驶汽车的运行需要 硬件、传感器集成、感知、预测、及路径规划、控制等多个模块配合进行。决策规划模块包含行为决策和轨迹规划两个子模块，行为决策基于感知信息合理决策当地前车辆的行为，并根据不同的行为确定轨迹规划的约束条件；指导轨迹规划模块规划出合适的路径、车速等信息，发送给控制模块。</p><p>​首先，无人方程式能进行类似于  <em><strong>L3</strong></em>  以上的无人驾驶功能的前提是 能得到较高精度建模水平的地图，在此基础上，我们能够实现较为精准的轨迹规划问题。</p><p>​首先理解 轨迹规划的基本逻辑：轨迹规划 的步骤为：<em><strong>路径规划+轨迹优化</strong></em> 。</p><p>​<u>路径规划</u> 能够实现在起点和终点之间找到合适的折线轨迹，但是我们不能直接使用该轨迹原因有二：</p><p>&lt;1&gt; 其只能实现单纯的折线的连接，精度无法满足比赛时的赛道需求。</p><p>&lt;2&gt;因为是一段段直线相连接，车辆只能向某个方向直线移动后，在转过一定角度，向着另一个方向移动。</p><p>如图所示：</p><p><img src="/%5Cimages%5Cimage-20240626181316408.png"></p><p>​所以我们就需要对该段线路进行优化：</p><p>​<u>轨迹优化</u>：在通过算法对该段线路优化后，我们就能得到较为合理的路线。</p><p><img src="/%5Cimages%5Cimage-20240626181530451.png"></p><pre><code> 所以我们将内容分为路径规划和轨迹优化两部分进行学习</code></pre><h2 id="二-、路径规划"><a href="#二-、路径规划" class="headerlink" title="二 、路径规划"></a>二 、路径规划</h2><h3 id="赛项一：直线加速。"><a href="#赛项一：直线加速。" class="headerlink" title="赛项一：直线加速。&lt;该赛项目针对“规划”的要求不高，主要目的为识别赛道中心线&gt;"></a>赛项一：直线加速。&lt;该赛项目针对“规划”的要求不高，主要目的为识别赛道中心线&gt;</h3><p>现就中心线提取提供几种算法可能性：</p><h4 id="霍夫变换（Hough-Transform）"><a href="#霍夫变换（Hough-Transform）" class="headerlink" title="&lt;一&gt; 霍夫变换（Hough Transform）"></a>&lt;一&gt; 霍夫变换（Hough Transform）</h4><p>霍夫变换（Hough Transform）于1962年由Paul Hough 首次提出，后于1972年由Richard Duda和Peter Hart推广使用，是图像处理领域内从图像中检测几何形状的基本方法之一。经典霍夫变换用来检测图像中的直线，后来霍夫变换经过扩展可以进行任意形状物体的识别，例如圆和椭圆。<br>霍夫变换运用两个坐标空间之间的变换，将在一个空间中具有相同形状的曲线或直线映射到另一个坐标空间的一个点上形成峰值，从而把检测任意形状的问题转化为统计峰值问题。</p><p>霍夫直线检测（Hough Line Detection）<br>Hough直线检测的基本原理在于利用点与线的对偶性，在我们的直线检测任务中，即图像空间中的直线与参数空间中的点是一一对应的，参数空间中的直线与图像空间中的点也是一一对应的。这意味着我们可以得出两个非常有用的结论：<br>1）图像空间中的每条直线在参数空间中都对应着单独一个点来表示；<br>2）图像空间中的直线上任何一部分线段在参数空间对应的是同一个点。<br>因此Hough直线检测算法就是把在图像空间中的直线检测问题转换到参数空间中对点的检测问题，通过在参数空间里寻找峰值来完成直线检测任务。</p><p>霍夫直线检测的基本原理<br>关于对偶性<br>1）图像空间中的点与参数空间中的直线一一对应。<br>在图像空间x-y中，一条直线在直角坐标系下可以表示为：<br><code>y = kx + b y=kx+b y=kx+b</code><br>其中k和b是参数，表示直线的斜率和截距。<br>过某一点<code>A(x 0 , y 0 ) A(x_0, y_0) A(x 0,y 0)</code>的所有直线的参数均满足方程<code>y 0 = k ∗ x 0 + b  y_0=k*x_0+b  y 0 =k∗x 0+b</code>，即点<code>A ( x 0 , y 0 ) A(x_0, y_0)A(x</code> <code>0 ,y 0 )</code>确定了一族直线.<br>如果我们将方程改写为：<code>b=-kx0+y0</code></p><p>那么该方程在参数空间k-b中就对应了一条直线。以上过程如图所示：</p><p><img src="/%5Cimages%5C3d5debc47ef25203e092fa79711a9d8a.png"></p><p>也就是说，图像空间x-y中的点<code>( x 0 , y 0 ) (x_0,y_0)(x 0 ,y 0)</code>对应了参数空间k-b中的直线<code>b = − k ∗ x 0 + y 0  b=-k*x_0+y_0  b=−k∗x 0 +y 0</code>。因此可以得到结论，图像空间中的点与参数空间中的直线一一对应。<br>2）图像空间中的直线与参数空间中的点一一对应<br>我们在直线y&#x3D;kx+b上再增加一个点B ( x 1 , y 1 ) B(x1, y1)B(x1,y1)，那么点<code>B ( x 1 , y 1 ) B(x_1, y_1)B(x 1 ,y 1 )</code>在参数空间k-b中同样对应了一条直线，如图所示：</p><p><img src="/%5Cimages%5C747abddd658c6c0992ccb678126bb824.png"></p><p>可以看到，图像空间x-y中的点A和点B在参数空间k-b中对应的直线相交于一点，这也就是说AB所确定的直线，在参数空间中对应着唯一一个点，而这个点的坐标值<code>( k 0 , b 0 ) (k_0, b_0)(k 0 ,b 0 )</code>也就是直线AB的参数。</p><p>以上就是在直线检测任务中关于对偶性的直观解释。这个性质也为我们解决直线检测任务提供了方法，也就是把图像空间中的直线对应到参数空间中的点，最后通过统计特性来解决问题。假如图像空间中有两条直线，那么最终在参数空间中就会对应到两个峰值点，依此类推。</p><p>如图3所示，图像空间中有5个点，将这5个点转换到参数空间k-b中对应着5条直线，每两条直线的交点可以确定图像空间中的一条直线，我们可以选择由尽可能多直线汇成的点，如A和B，将其参数空间中的坐标值作为图像空间中两条直线方程参数，由此便确定了两条直线，</p><p>总结来说，在参数k-b平面上相交直线最多的点，对应的x-y平面上的直线就是我们的解</p><p>参数空间的选择<br>上述为了方便讲解对偶性和霍夫变换的基本原理，我们的参数空间也选择了笛卡尔直角坐标系。但在实际应用中，参数空间是不能选择直角坐标系的，因为原始图像直角坐标空间中的特殊直线x&#x3D;c（垂直x轴，直线的斜率为无穷大）是没办法在基于直角坐标系的参数空间中表示的。<br>或者，直观理解，如下图4所示，为一条垂直于x轴的直线，将各点转换到参数空间k-b后的情况：</p><p>可以看到，这些点在参数空间中的直线并没有交点。</p><p>那么能否采用其他方式进行表示呢？是的，一般我们采用极坐标方式作为参数空间。<br>图5所示，为图像坐标系到极坐标系参数空间的转换过程：</p><p>对于图像空间中的垂线来说，用极坐标可以表示为：<br><strong>r &#x3D; x c o s θ + y s i n θ &#x3D; x</strong></p><p>从上面可以看到，参数空间的每个点(ρ,θ)都对应了图像空间的一条直线，或者说图像空间的一个点在参数空间中就对应为一条曲线。参数空间采用极坐标系，这样就可以在参数空间表示原始空间中的所有直线了。<br>注意，此时图像空间（直角坐标系x-y）上的一个点对应到参数空间（极坐标系ρ-θ）上是一条曲线，确切的说是一条正弦曲线。</p><p>如图6所示，为图像空间到极坐标参数空间的转换过程：</p><p>这样就把在图像空间中检测直线的问题转化为在极坐标参数空间中找通过点(r,θ)的最多正弦曲线数的问题。霍夫空间中，曲线的交点次数越多，所代表的参数越确定，画出的图形越饱满。</p><p>利用霍夫变换检测直线<br>如前所述，霍夫直线检测就是把图像空间中的直线变换到参数空间中的点，通过统计特性来解决检测问题。具体来说，如果一幅图像中的像素构成一条直线，那么这些像素坐标值（x, y）在参数空间对应的曲线一定相交于一个点，所以我们只需要将图像中的所有像素点（坐标值）变换成参数空间的曲线，并在参数空间检测曲线交点就可以确定直线了。</p><p>在理论上，一个点对应无数条直线或者说任意方向的直线(在参数空间中坐标轴表示的斜率k或者说θ有无数个)，但在实际应用中，我们必须限定直线的数量（即有限数量的方向）才能够进行计算。<br>因此，我们将直线的方向θ离散化为有限个等间距的离散值，参数ρ也就对应离散化为有限个值，于是参数空间不再是连续的，而是被离散量化为一个个等大小网格单元。将图像空间（直角坐标系）中每个像素点坐标值变换到参数空间（极坐标系）后，所得值会落在某个网格内，使该网格单元的累加计数器加1。当图像空间中所有的像素都经过霍夫变换后，对网格单元进行检查，累加计数值最大的网格，其坐标值（ρ0, θ0）就对应图像空间中所求的直线。如图7所示，为一个离散化过程。</p><p>霍夫变换直线检测步骤示例</p><p>总结：使用霍夫变换检测直线具体步骤：<br>1.彩色图像-&gt;灰度图<br>2.去噪（高斯核）<br>3.边缘提取（梯度算子、拉普拉斯算子、canny、sobel）<br>4.二值化（判断此处是否为边缘点，就看灰度值&#x3D;&#x3D;255）<br>5.映射到霍夫空间（准备两个容器，一个用来展示hough-space概况，一个数组hough-space用来储存voting的值，因为投票过程往往有某个极大值超过阈值，多达几千，不能直接用灰度图来记录投票信息）<br>6.取局部极大值，设定阈值，过滤干扰直线<br>7.绘制直线、标定角点</p><p>​                    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基于大学生无人方程式-轨迹规划问题-—-陈思成&quot;&gt;&lt;a href=&quot;#基于大学生无人方程式-轨迹规划问题-—-陈思成&quot; class=&quot;headerlink&quot; title=&quot;基于大学生无人方程式 轨迹规划问题 —-陈思成&quot;&gt;&lt;/a&gt;基于大学生无人方程式 轨迹规划问题</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初识无人系统与网络安全</title>
    <link href="https://chenscheng.github.io/2025/06/25/csc/"/>
    <id>https://chenscheng.github.io/2025/06/25/csc/</id>
    <published>2025-06-24T16:00:00.000Z</published>
    <updated>2025-06-25T18:01:52.725Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的个人博客！我是 <strong>陈思成</strong>，目前主要从事：</p><ul><li><p>🎓 <strong>大学生方程式无人系统开发</strong>  </p><ul><li>参与 Formula Student Robot 项目，从底盘设计、动力系统到自主控制算法，全流程驱动无人车在赛道上疾驰。  </li><li>核心技术：ROS 驱动、视觉里程计、路径规划、实时控制。</li><li>查看项目仓库：<a href="https://github.com/yourusername/fs-robot">GitHub – fs-robot</a></li></ul></li><li><p>🔒 <strong>网络安全工程师</strong>  </p><ul><li>深耕渗透测试与安全加固，对 Web 应用、网络协议及云平台进行漏洞挖掘与防御设计。  </li><li>曾在多个 CTF 比赛和企业安全评估中担纲主力，熟悉 Kali、Burp Suite、Metasploit 等工具链。  </li><li>我的安全笔记与工具集：<a href="https://github.com/yourusername/netsec-tools">GitHub – netsec-tools</a></li></ul></li></ul><hr><h2 id="博客内容导航"><a href="#博客内容导航" class="headerlink" title="博客内容导航"></a>博客内容导航</h2><ul><li><a href="/tags/%E6%97%A0%E4%BA%BA%E7%B3%BB%E7%BB%9F/">项目进展与技术总结</a>  </li><li><a href="/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/">安全攻防实战案例</a>  </li><li><a href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">学习笔记与心得</a></li></ul><hr><p>感谢你的关注！如果有任何问题或合作意向，欢迎通过以下方式联系我：</p><ul><li>📧 邮箱：<a href="mailto:&#x33;&#x34;&#x35;&#x38;&#54;&#x39;&#56;&#49;&#x39;&#x34;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;">&#x33;&#x34;&#x35;&#x38;&#54;&#x39;&#56;&#49;&#x39;&#x34;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a></li><li>🖥️ GitHub：[github.com&#x2F;ChenSchenG]</li><li>📝 微信公众号：无人駭客实验室</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎来到我的个人博客！我是 &lt;strong&gt;陈思成&lt;/strong&gt;，目前主要从事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;🎓 &lt;strong&gt;大学生方程式无人系统开发&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参与 Formula Student Robot 项目，从底</summary>
      
    
    
    
    
  </entry>
  
</feed>
